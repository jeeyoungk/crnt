name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Tests

    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - # we use bun for everything, but test against node to ensure that it is working.
        name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # minimum version supported by our library.
      - name: Install dependencies
        id: install
        run: bun install
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      - name: Check code formatting
        if: always() && steps.install.conclusion == 'success'
        run: bun run format
      - name: Run linting
        if: always() && steps.install.conclusion == 'success'
        run: bun run lint
      - name: Run type checking
        if: always() && steps.install.conclusion == 'success'
        run: bun run typecheck
      - name: Build package
        if: always() && steps.install.conclusion == 'success'
        run: bun run tsup
      - name: Check package exports
        if: always() && steps.install.conclusion == 'success'
        run: bun run check:attw
      - name: Test (bun)
        if: always() && steps.install.conclusion == 'success'
        run: bun test
      - name: Test (node via vitest)
        if: always() && steps.install.conclusion == 'success'
        run: npx vitest
      - name: Run browser tests
        if: always() && steps.install.conclusion == 'success'
        run: npx vitest --browser
      - name: Run Documentation
        if: always() && steps.install.conclusion == 'success'
        run: bun run docs --treatWarningsAsErrors

  release:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
      pages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build package
        run: bun run tsup
      - name: Release and Publish
        id: semantic_release
        run: |
          # Store git HEAD before semantic-release
          BEFORE_SHA=$(git rev-parse HEAD)
          echo "before_sha=$BEFORE_SHA" >> $GITHUB_OUTPUT

          # Run semantic-release
          bun run semantic-release

          # Check if semantic-release created a new commit (indicating a release)
          AFTER_SHA=$(git rev-parse HEAD)
          if [ "$BEFORE_SHA" != "$AFTER_SHA" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # This one needs to be after release, as release changes the version number.
      - name: Generate documentation
        if: always() && steps.semantic_release.outputs.new_release == 'true'
        run: bun run docs
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always() && steps.semantic_release.outputs.new_release == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: 'crnt.jeeyoungk.com'
